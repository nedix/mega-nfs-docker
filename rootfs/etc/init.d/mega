#!/sbin/openrc-run

extra_commands="healthcheck"

export SANDBOX_PATH="/chroot/${RC_SVCNAME}"

depend() {
    need nftables
    before rclone
}

start_pre() {
    /opt/mega-nfs/sandbox setup_chroot
    /opt/mega-nfs/sandbox setup_network

    for BIN in /bin/sh /usr/bin/mega-*; do
        DIR="${SANDBOX_PATH}${BIN%/*}"
        mkdir -p "$DIR"
        cp "$BIN" "$DIR"
    done

    for LIB in $(ldd /usr/bin/mega-cmd-server | awk '/=>/ {print $3}'); do
        DIR="${SANDBOX_PATH}${LIB%/*}"
        mkdir -p "$DIR"
        cp "$LIB" "$DIR"
    done

    . /etc/mega/.env

    # Create a table to hold the connection limits
    ip netns exec "$RC_SVCNAME" nft add table inet filters

    # Create sets to track the input and output connection limits
    ip netns exec "$RC_SVCNAME" nft add set inet filters input_connlimit '{ type ipv4_addr ; counter ; flags dynamic ; }'
    ip netns exec "$RC_SVCNAME" nft add set inet filters output_connlimit '{ type ipv4_addr ; counter ; flags dynamic ; }'

    # Create chains for the input and output traffic
    ip netns exec "$RC_SVCNAME" nft add chain inet filters input_chain ip daddr 10.0.0.0/8 '{ type filter hook input priority 0 ; policy accept ; }'
    ip netns exec "$RC_SVCNAME" nft add chain inet filters output_chain ip saddr 10.0.0.0/8 '{ type filter hook output priority 0 ; policy accept ; }'

    # Add rules to mark established connections with a rate greater than 0 bits/second
    ip netns exec "$RC_SVCNAME" nft add rule inet filters input_chain ip daddr 10.0.0.0/8 ct mark 0 ct state established limit rate over 0/ms add @input_connlimit "{ ip daddr rate over 0/ms }" ct mark set 1
    ip netns exec "$RC_SVCNAME" nft add rule inet filters output_chain ip saddr 10.0.0.0/8 ct mark 0 ct state established limit rate over 0/ms add @output_connlimit "{ ip saddr rate over 0/ms }" ct mark set 1

    # Add rules to drop established connections with a rate greater than 0 bits/second when the limit is exceeded
    ip netns exec "$RC_SVCNAME" nft add rule inet filters input_chain ip daddr 10.0.0.0/8 ct mark 1 ct state established limit rate over 0/ms add @input_connlimit "{ ip daddr rate over ${STREAMS} }" ct mark set 0 reject with tcp reset
    ip netns exec "$RC_SVCNAME" nft add rule inet filters output_chain ip saddr 10.0.0.0/8 ct mark 1 ct state established limit rate over 0/ms add @output_connlimit "{ ip saddr rate over ${TRANSFERS} }" ct mark set 0 reject with tcp reset

    # Add rules to remove connections from the map when they are no longer established
    ip netns exec "$RC_SVCNAME" nft add rule inet filters input_chain ip daddr 10.0.0.0/8 ct mark 1 ct state !established ct mark set 0
    ip netns exec "$RC_SVCNAME" nft add rule inet filters output_chain ip saddr 10.0.0.0/8 ct mark 1 ct state !established ct mark set 0
}

start() {
    ebegin "Starting ${RC_SVCNAME}"

    . /etc/mega/.env

    /opt/mega-nfs/sandbox /usr/bin/mega-login "$EMAIL" "$PASSWORD"

    ENDPOINT=$(/opt/mega-nfs/sandbox /usr/bin/mega-webdav --port="1000${RC_SVCNAME##*-}" "$DIRECTORY" | awk '{print $NF}')

    echo "$ENDPOINT" > "${SANDBOX_PATH}/home/endpoint"

    sed -i "s|url = #${RC_SVCNAME}-url|url = ${ENDPOINT}|" /etc/rclone/rclone.conf

    healthcheck && eend 0 || (stop; eend 1)
}

stop() {
    ebegin "Stopping ${RC_SVCNAME}"

    sandbox /usr/bin/mega-webdav -d --all

    eend $?
}

status() {
    healthcheck && eend 0 || eend 1
}

healthcheck() {
    exit 0
    (wget -q --spider $(cat "${SANDBOX_PATH}/home/endpoint")) 2> /dev/null
}
