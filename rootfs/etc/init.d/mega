#!/sbin/openrc-run

extra_commands="healthcheck"

export SANDBOX_NUMBER="${RC_SVCNAME##*-}"
export SANDBOX_PATH="/chroot/${RC_SVCNAME}"

depend() {
    need nftables
    before rclone
}

start_pre() {
    /opt/mega-nfs/sandbox setup_chroot
    /opt/mega-nfs/sandbox setup_network

    for BIN in /bin/sh /usr/bin/mega-*; do
        DIR="${SANDBOX_PATH}${BIN%/*}"
        mkdir -p "$DIR"
        cp "$BIN" "$DIR"
    done

    for LIB in $(ldd /usr/bin/mega-cmd-server | awk '/=>/ {print $3}'); do
        DIR="${SANDBOX_PATH}${LIB%/*}"
        mkdir -p "$DIR"
        cp "$LIB" "$DIR"
    done

    . /etc/mega/.env

    # Create a table to hold the connection limits
    ip netns exec "$RC_SVCNAME" nft add table inet filter_table

    # Create chains for the input and output traffic
    ip netns exec "$RC_SVCNAME" nft add chain inet filter_table input_chain '{ type filter hook input priority 0; policy accept; }'
    ip netns exec "$RC_SVCNAME" nft add chain inet filter_table output_chain '{ type filter hook output priority 0; policy accept; }'

    # Create sets to track active connections
    ip netns exec "$RC_SVCNAME" nft add set inet filter_table streams_limit '{ type ipv4_addr; flags dynamic; }'
    ip netns exec "$RC_SVCNAME" nft add set inet filter_table transfers_limit '{ type ipv4_addr; flags dynamic; }'

    # Add a rule to accept incoming service traffic
    ip netns exec "$RC_SVCNAME" nft add rule inet filter_table input_chain \
        ct state established \
        ip daddr 127.0.0.1 \
        tcp dport "1000${SANDBOX_NUMBER}" \
        accept

    # Add a rule to accept idle incoming connections
    ip netns exec "$RC_SVCNAME" nft add rule inet filter_table input_chain \
        ct state established \
        ip daddr 127.0.0.1 \
        meter idle_streams '{ ip saddr . tcp sport timeout 1s limit rate 1/second }' \
        accept

    # Add a rule to accept idle outgoing connections
    ip netns exec "$RC_SVCNAME" nft add rule inet filter_table output_chain \
        ct state established \
        ip saddr 127.0.0.1 \
        meter idle_transfers '{ ip daddr . tcp dport timeout 1s limit rate 1/second }' \
        accept

    # Add a rule to reject incoming connections that exceed the limits
    ip netns exec "$RC_SVCNAME" nft add rule inet filter_table input_chain \
        ct state established \
        ip daddr 127.0.0.1 \
        tcp dport '!=' "1000${SANDBOX_NUMBER}" \
        meter active_streams '{ ip saddr . tcp sport timeout 1s limit rate over 1/second }' \
        add @streams_limit "{ ip daddr ct count over ${STREAMS} }" \
        reject with tcp reset

    # Add a rule to reject outgoing connections that exceed the limits
    ip netns exec "$RC_SVCNAME" nft add rule inet filter_table output_chain \
        ct state established \
        ip saddr 127.0.0.1 \
        tcp sport '!=' "1000${SANDBOX_NUMBER}" \
        meter active_transfers '{ ip daddr . tcp dport timeout 1s limit rate over 1/second }' \
        add @transfers_limit "{ ip saddr ct count over ${TRANSFERS} }" \
        reject with tcp reset

    ip netns exec "$RC_SVCNAME" nft list ruleset
}

start() {
    ebegin "Starting ${RC_SVCNAME}"

    . /etc/mega/.env

    /opt/mega-nfs/sandbox /usr/bin/mega-login "$EMAIL" "$PASSWORD"

    ENDPOINT=$(/opt/mega-nfs/sandbox /usr/bin/mega-webdav --port="1000${SANDBOX_NUMBER}" "$DIRECTORY" | awk '{print $NF}')

    echo "$ENDPOINT" > "${SANDBOX_PATH}/home/endpoint"

    sed -i "s|url = #${RC_SVCNAME}-url|url = ${ENDPOINT}|" /etc/rclone/rclone.conf

    healthcheck && eend 0 || (stop; eend 1)
}

stop() {
    ebegin "Stopping ${RC_SVCNAME}"

    /opt/mega-nfs/sandbox sandbox /usr/bin/mega-webdav -d --all

    eend $?
}

status() {
    healthcheck && eend 0 || eend 1
}

healthcheck() {
    exit 0
    (wget -q --spider $(cat "${SANDBOX_PATH}/home/endpoint")) 2> /dev/null
}
